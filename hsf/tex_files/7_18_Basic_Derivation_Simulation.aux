\relax 
\providecommand\hyper@newdestlabel[2]{}
\@writefile{toc}{\contentsline {section}{\numberline {2}Derivation: Basic Model}{3}{section.2}\protected@file@percent }
\newlabel{section:derivation:basic_model}{{2}{3}{Derivation: Basic Model}{section.2}{}}
\newlabel{eq:lds_dimensionless}{{2.1}{3}{Derivation: Basic Model}{equation.2.1}{}}
\newlabel{eq:xhat}{{2.2}{3}{Derivation: Basic Model}{equation.2.2}{}}
\newlabel{eq:rdot}{{2.3}{3}{Derivation: Basic Model}{equation.2.3}{}}
\newlabel{eq:error_def}{{2.4}{3}{Derivation: Basic Model}{equation.2.4}{}}
\newlabel{eq:derivation_init}{{2.5}{3}{Derivation: Basic Model}{equation.2.5}{}}
\newlabel{eq:derivation_sub_svd}{{2.6}{4}{Derivation: Basic Model}{equation.2.6}{}}
\newlabel{eq:rotated_voltage_psc_def}{{2.7}{5}{Derivation: Basic Model}{equation.2.7}{}}
\newlabel{eq:rotated_voltage_dynamics}{{2.8}{5}{Derivation: Basic Model}{equation.2.8}{}}
\newlabel{eq:rho_dot}{{2.9}{5}{Derivation: Basic Model}{equation.2.9}{}}
\newlabel{eq:delta_dec}{{2.11}{6}{Derivation: Basic Model}{equation.2.11}{}}
\newlabel{eq:voltage_threshold}{{2.12}{7}{Derivation: Basic Model}{equation.2.12}{}}
\newlabel{eq:sim_I_params}{{2.13}{8}{Derivation: Basic Model}{equation.2.13}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {1}{\ignorespaces Simulation of equations (\ref  {eq:rotated_voltage_dynamics}), (\ref  {eq:rho_dot}), and (\ref  {eq:voltage_threshold}), with parameters listed in equation (\ref  {eq:sim_I_params}). \textbf  {\textit  {Top:}} The decoded network estimate plotted alongside the target dynamical system. \textbf  {\textit  {Middle:}} The estimation error along each state-space dimension. \textbf  {\textit  {Bottom: }}The membrane potentials of the 4 neurons during the same time period.  For the numerical implementation, the matrix exponential was used to integrate the continuous terms over a simulation time step. Continuous terms include all equation terms excepting the spike trains $\Omega $ handled separately. After integrating over a timestep, all neurons above threshold were manually reset according to the spiking rule (\ref  {eq:voltage_threshold}). The matrix exponential was computed using a Pad\'{e} approximation via the Python package Scipy: \textit  {scipy.linalg.expm()}. \relax }}{10}{figure.1}\protected@file@percent }
\newlabel{fig:Simulation_I}{{1}{10}{Simulation of equations (\ref {eq:rotated_voltage_dynamics}), (\ref {eq:rho_dot}), and (\ref {eq:voltage_threshold}), with parameters listed in equation (\ref {eq:sim_I_params}). \textbf {\textit {Top:}} The decoded network estimate plotted alongside the target dynamical system. \textbf {\textit {Middle:}} The estimation error along each state-space dimension. \textbf {\textit {Bottom: }}The membrane potentials of the 4 neurons during the same time period.\\ For the numerical implementation, the matrix exponential was used to integrate the continuous terms over a simulation time step. Continuous terms include all equation terms excepting the spike trains $\Omega $ handled separately. After integrating over a timestep, all neurons above threshold were manually reset according to the spiking rule (\ref {eq:voltage_threshold}). The matrix exponential was computed using a Pad\'{e} approximation via the Python package Scipy: \textit {scipy.linalg.expm()}. \relax }{figure.1}{}}
\@setckpt{tex_files/7_18_Basic_Derivation_Simulation}{
\setcounter{page}{11}
\setcounter{equation}{13}
\setcounter{enumi}{6}
\setcounter{enumii}{0}
\setcounter{enumiii}{0}
\setcounter{enumiv}{0}
\setcounter{footnote}{0}
\setcounter{mpfootnote}{0}
\setcounter{part}{0}
\setcounter{section}{2}
\setcounter{subsection}{0}
\setcounter{subsubsection}{0}
\setcounter{paragraph}{0}
\setcounter{subparagraph}{0}
\setcounter{figure}{1}
\setcounter{table}{0}
\setcounter{parentequation}{0}
\setcounter{caption@flags}{0}
\setcounter{continuedfloat}{0}
\setcounter{Item}{10}
\setcounter{Hfootnote}{0}
\setcounter{bookmark@seq@number}{2}
\setcounter{section@level}{1}
}
